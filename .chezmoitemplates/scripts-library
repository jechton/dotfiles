# shellcheck shell=bash

set -euo pipefail

function log_color() {
  local color_code="$1"
  shift

  printf "\033[${color_code}m%s\033[0m\n" "$*" >&2
}

function log_red() {
  log_color "0;31" "$@"
}

function log_blue() {
  log_color "0;34" "$@"
}

function log_green() {
  log_color "1;32" "$@"
}

function log_yellow() {
  log_color "1;33" "$@"
}

function log_task() {
  log_blue "üîÉ" "$@"
}

function log_manual_action() {
  log_red "‚ö†Ô∏è" "$@"
}

function log_c() {
  log_yellow "üëâ" "$@"
}

function c() {
  log_c "$@"
  "$@"
}

function c_exec() {
  log_c "$@"
  exec "$@"
}

function log_error() {
  log_red "‚ùå" "$@"
}

function log_info() {
  log_blue "‚ÑπÔ∏è" "$@"
}

function error() {
  log_error "$@"
  exit 1
}

function gsettings_ensure() {
  local schema="$1"
  local key="$2"
  local value="$3"
  local extension="${4:-}"

  local first_args=()
  if [[ -n "${extension}" ]]; then
    first_args+=(--schemadir "${HOME}/.local/share/gnome-shell/extensions/${extension}/schemas")
  fi

  local current_value
  current_value="$(gsettings "${first_args[@]}" get "${schema}" "${key}")"

  if [[ "${current_value}" != "${value}" && "${current_value}" != "'${value}'" ]]; then
    log_task "Setting ${schema}.${key} to ${value}"
    gsettings "${first_args[@]}" set "${schema}" "${key}" "${value}"
  fi
}

function dconf_ensure() {
  local key="$1"
  local value="$2"

  local current_value
  current_value="$(dconf read "${key}")"

  if [[ "${current_value}" != "${value}" && "${current_value}" != "'${value}'" ]]; then
    log_task "Setting ${key} to ${value}"
    dconf write "${key}" "${value}"
  fi
}
